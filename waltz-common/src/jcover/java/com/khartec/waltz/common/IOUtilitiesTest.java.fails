package com.khartec.waltz.common;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import java.io.ByteArrayOutputStream;
import java.io.StringBufferInputStream;

import org.junit.jupiter.api.Test;
import org.springframework.core.io.Resource;

/**
 * Unit tests for com.khartec.waltz.common.IOUtilities
 *
 * @author Diffblue Cover
 */

class IOUtilitiesTest {

    @Test
    void readLinesReturnsFoo() {
        assertThat(IOUtilities.readLines(new StringBufferInputStream("foo")), hasSize(1));
        assertThat(IOUtilities.readLines(new StringBufferInputStream("foo")).get(0), is("foo"));
    }

    @Test
    void copyStream() throws java.io.IOException {

        // arrange
        ByteArrayOutputStream output = new ByteArrayOutputStream();

        // act
        IOUtilities.copyStream(new StringBufferInputStream("foo"), output);

        // assert
        assertArrayEquals(new byte[] { 102, 111, 111 }, output.toByteArray());
    }

    @Test
    void readAsStringReturnsFoo() {
        assertThat(IOUtilities.readAsString(new StringBufferInputStream("foo")), is("foo"));
    }

    @Test
    void getFileResource() throws java.io.IOException {
        Resource result = IOUtilities.getFileResource("data.txt");
        assertThat(result.getDescription(), is("file [/home/thomas_perkins/.waltz/data.txt]"));
        assertThat(result.getFile().getPath(), is("/home/thomas_perkins/.waltz/data.txt"));
        assertThat(result.getFilename(), is("data.txt"));
        assertThat(result.getURI().toString(), is("file:/home/thomas_perkins/.waltz/data.txt"));
        assertThat(result.getURL().toString(), is("file:/home/thomas_perkins/.waltz/data.txt"));
        assertThat(result.isFile(), is(true));
        assertThat(result.isOpen(), is(false));
    }

    @Test
    void getFileResourceFileNameIsEmpty() throws java.io.IOException {
        Resource result = IOUtilities.getFileResource("");
        assertThat(result.getDescription(), is("class path resource []"));
        assertThat(result.getFile().getPath().startsWith(System.getProperty("java.io.tmpdir")), is(true));
        assertThat(result.getFilename(), is(""));
        assertThat(result.getURI().toString(), is("file:/tmp/jcover-cp-iMfPRl/"));
        assertThat(result.getURL().toString(), is("file:/tmp/jcover-cp-iMfPRl/"));
        assertThat(result.isFile(), is(true));
        assertThat(result.isOpen(), is(false));
    }
}
