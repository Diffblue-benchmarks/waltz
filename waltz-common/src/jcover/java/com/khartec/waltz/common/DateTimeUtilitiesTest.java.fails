package com.khartec.waltz.common;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.nullValue;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.regex.Pattern;

import org.junit.jupiter.api.Test;

/**
 * Unit tests for com.khartec.waltz.common.DateTimeUtilities
 *
 * @author Diffblue Cover
 */

class DateTimeUtilitiesTest {

    @Test
    void nowUtc() {
        assertThat(
            Math.abs(Duration.between(LocalDateTime.now(), DateTimeUtilities.nowUtc()).getSeconds())
            <= 10L, is(true));
    }

    @Test
    void nowUtcTimestamp() {
        assertThat(DateTimeUtilities.nowUtcTimestamp(), equalTo(Timestamp.valueOf("2020-11-04 04:05:17.366")));
    }

    @Test
    void toSqlDate() throws java.text.ParseException {
        assertThat(DateTimeUtilities.toSqlDate(LocalDate.of(2_000, 1, 1)).toString(), is("2000-01-01"));
        assertThat(DateTimeUtilities.toSqlDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31")).toString(), is("2010-12-31"));
        assertThat(DateTimeUtilities.toSqlDate((java.util.Date) null), is(nullValue()));
        assertThat(DateTimeUtilities.toSqlDate((LocalDate) null), is(nullValue()));
    }

    @Test
    void toLocalDate() throws java.text.ParseException {
        assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2}", DateTimeUtilities.toLocalDate(Timestamp.valueOf("2019-12-31 23:10:59")).toString()), is(true));
        assertThat(Pattern.matches("\\d{2,4}-\\d{1,2}-\\d{1,2}", DateTimeUtilities.toLocalDate(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31")).toString()), is(true));
        assertThat(DateTimeUtilities.toLocalDate((java.util.Date) null), is(nullValue()));
        assertThat(DateTimeUtilities.toLocalDate((Timestamp) null), is(nullValue()));
    }

    @Test
    void toLocalDateTime() throws java.text.ParseException {
        assertThat(DateTimeUtilities.toLocalDateTime(new SimpleDateFormat("yyyy-MM-dd").parse("2010-12-31")), equalTo(LocalDateTime.parse("2010-12-31T00:00")));
        assertThat(DateTimeUtilities.toLocalDateTime(null), is(nullValue()));
    }

    @Test
    void today() {
        assertThat(DateTimeUtilities.today(), equalTo(LocalDate.now()));
    }
}
